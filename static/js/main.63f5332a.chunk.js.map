{"version":3,"sources":["services/LocalStorageSevice.tsx","services/FormUtils.tsx","services/apis/Reservations.tsx","screens/ReportScreen/report.tsx","screens/ReservationsScreen/reservations.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StorageKey","LocalStorageService","setReservationList","details","localStorage","setItem","Reservations","getReservationList","getItem","clearReservationList","removeItem","DateTimeFormat","FormUtils","form","this","validateText","firstName","lastName","validateDate","moment","arrivalDate","validateDateFormat","validateArrivalTime","arrivalTime","validateDepartureTime","departureTime","validatePhone","phone","validateNumber","total","text","length","number","isSameOrBefore","date","isValid","selectedTime","format","now","set","second","millisecond","isSameOrAfter","isBefore","test","customer","unit","calTalblesByPeriod","tempNameList","Array","from","Set","map","e","name","i","Math","ceil","reduce","n","Number","isArray","sort","a","b","diff","numberCandidate","valueOf","tempIndex","currentArrivalTime","currentDepartureTime","push","max","ReservationService","reservationForm","Promise","resolve","reject","validateForm","reservationList","JSON","parse","stringify","Error","filter","allTables","calculateTables","toISOString","reservationFormResponse","allTable","result","r","key","toUpperCase","Object","create","entries","value","table","reservationListDetails","totalByName","ReportScreen","props","state","selectedDate","summary","getReservationsByDate","then","data","setState","catch","console","log","count","className","Table","responsive","lengthSpan","j","rowSpanCond","rowSpan","defaultValue","onChange","handleOnChangeArrivalDate","allowClear","renderTable","React","Component","ReservationsScreen","validated","_onSubmit","bind","formBody","getFormBody","saveReservations","toast","success","position","POSITION","TOP_CENTER","autoClose","clearData","error","message","warn","event","target","Form","Row","Group","as","Col","controlId","Label","Control","required","type","placeholder","isInvalid","Feedback","handleOnChangePhoneNumber","md","undefined","Text","time","handleOnChangeTotal","String","Button","onClick","App","Navbar","bg","variant","Brand","Nav","Link","href","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","AppWithRouter","basename","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.63f5332a.chunk.js","sourcesContent":["\nenum StorageKey {\n    Reservations = 'reservations',\n}\n\nfunction setReservationList(details: string) {\n    return localStorage.setItem(StorageKey.Reservations, details);\n}\n\nfunction getReservationList(): string {\n    return localStorage.getItem(StorageKey.Reservations) || '';\n}\n\nfunction clearReservationList() {\n    return localStorage.removeItem(StorageKey.Reservations);\n}\n\nconst LocalStorageService = {\n    setReservationList,\n    getReservationList,\n    clearReservationList\n}\n\nexport default LocalStorageService;","import moment, { Moment } from \"moment\";\nimport { ReservationForm } from \"../models/Customer\";\n\nexport const DateTimeFormat = {\n    date: 'YYYY-MM-DD',\n    time: 'h:mm A',\n};\n\ninterface UniqueCustomerName {\n    name: string,\n    total: number,\n}\n\nexport class FormUtils {\n\n    // Validate all\n    public static validateForm(form: ReservationForm): boolean {\n        return this.validateText(form.firstName)\n            && this.validateText(form.lastName)\n            && this.validateDate(moment(form.arrivalDate))\n            && this.validateDateFormat(form.arrivalDate)\n            && this.validateArrivalTime(moment(form.arrivalDate), moment(form.arrivalTime, DateTimeFormat.time))\n            && this.validateDepartureTime(moment(form.arrivalTime, DateTimeFormat.time), moment(form.departureTime, DateTimeFormat.time))\n            && this.validatePhone(form.phone)\n            && this.validateNumber(form.total);\n    }\n\n    // Validate string\n    public static validateText(text: string): boolean {\n        return text.length > 0;\n    }\n\n    // ValidateNumber\n    public static validateNumber(number: number): boolean {\n        return number > 0;\n    }\n\n    // Selected Date must be more than today\n    public static validateDate(arrivalDate: Moment): boolean {\n        const today = moment();\n        return today.isSameOrBefore(arrivalDate, 'day');\n    }\n\n    // Expect YYYY-MM-DD format\n    public static validateDateFormat(date: string): boolean {\n        return moment(date, DateTimeFormat.date, true).isValid();\n    }\n\n    // Arrival Time must be equare equal to or more than now\n    public static validateArrivalTime(arrivalDate: Moment, arrivalTime: Moment): boolean {\n        const selectedTime = moment(`${arrivalDate.format(DateTimeFormat.date)} ${arrivalTime.format(DateTimeFormat.time)}`);\n        const now = moment().set({ second: 0, millisecond: 0 })\n        return selectedTime.isSameOrAfter(now);\n    }\n\n    // Departure Time must be more than Arrival Time\n    public static validateDepartureTime(arrivalTime: Moment, departureTime: Moment): boolean {\n        arrivalTime.set({ second: 0, millisecond: 0 });\n        departureTime.set({ second: 0, millisecond: 0 });\n        return arrivalTime.isBefore(departureTime);\n    }\n\n    // Phone number must be correct\n    public static validatePhone(phone: string): boolean {\n        const phoneFormat = /^[0][1-9]\\d{7}$|^[0][1-9]\\d{8}$/;\n        return phoneFormat.test(phone)\n    }\n\n    public static calculateTables(customer: ReservationForm[], unit: number): number {\n\n        const calTalblesByPeriod = (tempNameList: UniqueCustomerName[], unit: number) => {\n            return Array.from(new Set(tempNameList.map((e) => e.name))).map((i) => {\n                return Math.ceil(tempNameList.reduce((n, e) => i === e.name ? n + Number(e.total) : n, 0) / unit)\n            }).reduce((n, e) => n + Number(e), 0)\n        };\n\n        if (Array.isArray(customer) && customer.length > 0 && unit > 0) {\n            customer.sort((a, b) => moment(a.arrivalTime).diff(moment(b.arrivalTime)));\n            if (customer.length > 1) {\n                const numberCandidate = [];\n                let departureTime = moment(customer[0].departureTime).valueOf();\n                let tempNameList: UniqueCustomerName[] = [{ name: `${customer[0].firstName} ${customer[0].lastName}`, total: customer[0].total }];\n                let tempIndex = -1; // For coming back to period that it's needed to start checking again.\n                for (let i = 1; i < customer.length; i++) {\n                    const currentArrivalTime = moment(customer[i].arrivalTime).valueOf();\n                    const currentDepartureTime = moment(customer[i].departureTime).valueOf();\n                    if (currentDepartureTime <= departureTime) {\n                        tempNameList.push({ name: `${customer[i].firstName} ${customer[i].lastName}`, total: customer[i].total });\n                    } else if (currentDepartureTime > departureTime && currentArrivalTime < departureTime) {\n                        tempNameList.push({ name: `${customer[i].firstName} ${customer[i].lastName}`, total: customer[i].total });\n                        tempIndex = tempIndex === -1 ? i : tempIndex;\n                    } else if (currentArrivalTime >= departureTime) {\n                        numberCandidate.push(calTalblesByPeriod(tempNameList, unit))\n                        if (tempIndex !== -1) {\n                            i = tempIndex;\n                        }\n                        tempIndex = -1;\n                        tempNameList = [];\n                        departureTime = moment(customer[i].departureTime).valueOf();\n                    }\n\n                    if (i === customer.length - 1) {\n                        numberCandidate.push(calTalblesByPeriod(tempNameList, unit));\n                    }\n                }\n                return Math.max(...numberCandidate);\n            } else {\n                return Math.ceil(customer[0].total / unit);\n            }\n        } else {\n            return 0;\n        }\n    }\n}\n","import moment from \"moment\";\nimport { ReservationForm, ReservationFormResponse, ReservationList } from \"../../models/Customer\";\nimport LocalStorageService from \"../LocalStorageSevice\";\nimport { FormUtils, DateTimeFormat } from \"../FormUtils\";\n\nexport class ReservationService {\n\n    /**\n     * Save Reservation Form\n     */\n    public static saveReservations(reservationForm: ReservationForm | undefined): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            if (reservationForm && FormUtils.validateForm(reservationForm)) {\n                const reservationList = JSON.parse(LocalStorageService.getReservationList() || \"[]\") as ReservationForm[];\n                reservationList.push(reservationForm);\n                const details = JSON.stringify(reservationList);\n                LocalStorageService.setReservationList(details)\n                resolve(true);\n            } else {\n                reject(new Error('Data could not be saved, please try again.'))\n            }\n        });\n    }\n\n    /**\n     * Get Reservation Form\n     */\n\n    public static getReservationsByDate(date: string | null | undefined): Promise<ReservationFormResponse> {\n        return new Promise((resolve, reject) => {\n            if (date && FormUtils.validateDateFormat(date)) {\n                let reservationList = JSON.parse(LocalStorageService.getReservationList() || \"[]\") as ReservationForm[];\n                reservationList = reservationList.filter((e) => e.arrivalDate === date);\n                const unit = 4;\n                const allTables = FormUtils.calculateTables(\n                    // Convert Time (HH:mm A) to ISO String \n                    // Since It's hard to compare when creating a new Moment variable by time only\n                    reservationList.map((e) => {\n                        e.arrivalTime = moment(`${moment().format(DateTimeFormat.date)} ${e.arrivalTime}`).toISOString();\n                        e.departureTime = moment(`${moment().format(DateTimeFormat.date)} ${e.departureTime}`).toISOString();\n                        return e;\n                    })\n                    , unit);\n                const reservationFormResponse: ReservationFormResponse = { allTable: 0, reservationList: [] };\n                if (Array.isArray(reservationList) && reservationList.length > 0) {\n                    let result = reservationList\n                        // Group by First name + Last name.\n                        // In case a customer reserves more than 1 in this day.\n                        .reduce((r, a) => {\n                            const key = `${a.firstName.toUpperCase()} ${a.lastName.toUpperCase()}`\n                            r[key] = r[key] || [];\n                            r[key].push(a);\n                            return r;\n                        }, Object.create(null));\n\n                    for (let [key, value] of Object.entries(result)) {\n                        const reservationList: ReservationList = { name: '', total: 0, table: 0, reservationListDetails: [] };\n                        const totalByName = (value as ReservationForm[]).reduce((n, e) => n + Number(e.total), 0);\n\n                        const table = Math.ceil(totalByName / unit);\n                        reservationList.name = key;\n                        reservationList.reservationListDetails = value as ReservationForm[];\n                        reservationList.total = totalByName;\n                        reservationList.table = table;\n\n                        reservationFormResponse.reservationList.push(reservationList);\n                    }\n                    reservationFormResponse.allTable = allTables;\n                }\n                resolve(reservationFormResponse);\n            } else {\n                reject(new Error('Unable to complete your request.'));\n            }\n        });\n    }\n}\n\n\nexport default ReservationService;","import React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { DatePicker } from 'antd';\nimport { ReservationList } from '../../models/Customer';\nimport './report.scss';\nimport { ReservationService } from '../../services/apis/Reservations';\nimport moment, { Moment } from 'moment';\nimport { DateTimeFormat } from '../../services/FormUtils';\n\ninterface Props {}\ninterface State {\n    reservationList: ReservationList[],\n    summary: number,\n    selectedDate: Moment,\n}\n\n\nclass ReportScreen extends React.Component<Props, State>  {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            reservationList: [],\n            selectedDate: moment(),\n            summary: 0,\n        };\n    }\n\n    componentDidMount() {\n        this.getReservationList(this.state.selectedDate);\n    }\n\n    getReservationList(selectedDate: Moment) {\n        ReservationService.getReservationsByDate(selectedDate.format(DateTimeFormat.date))\n            .then((data) => {\n                this.setState({ reservationList: data.reservationList, summary: data.allTable });\n            })\n            .catch((e) => console.log(e));\n    }\n\n    renderTable() {\n        const { reservationList, summary } = this.state;\n        let count = 0;\n        return (\n            <div className='table-style'>\n                <Table responsive='sm'>\n                    <thead>\n                        <tr>\n                            <th>No.</th>\n                            <th>Name</th>\n                            <th>Arrival Time</th>\n                            <th>Departure Time</th>\n                            <th>Tel</th>\n                            <th>Total/Reservation</th>\n                            <th>Total</th>\n                        </tr>\n                    </thead>\n                        <tbody>\n                            {reservationList.map((customer, i) => {\n                                const lengthSpan = customer.reservationListDetails.length;\n                                return (\n                                    <>\n                                        {customer.reservationListDetails.map((details, j) => {\n                                            const key = `${i}${j}-${customer.name}-${details.arrivalTime}-${details.departureTime}--${details.phone}-${details.total}`\n                                            const rowSpanCond = j === 0 ? true : false;\n                                            count = count + 1;\n                                            return (\n                                                <tr key={key}>\n                                                    <td>{count}</td>\n                                                    {rowSpanCond && <td rowSpan={lengthSpan}>{customer.name}</td>}\n                                                    <td>{moment(details.arrivalTime).format(DateTimeFormat.time)}</td>\n                                                    <td>{moment(details.departureTime).format(DateTimeFormat.time)}</td>\n                                                    <td>{details.phone}</td>\n                                                    <td>{details.total}</td>\n                                                    {rowSpanCond && <td rowSpan={lengthSpan}>{customer.total}</td>}\n                                                </tr>\n                                            )\n                                        })}\n                                    </>\n                                )\n                            })}\n                        </tbody>\n                </Table>\n                <div className='summary-style'>\n                    {`Summary: ${summary} Table(s)`}\n                </div>\n            </div>\n        )\n    }\n\n    handleOnChangeArrivalDate(selectedDate: Moment | null) {\n        if (selectedDate) {\n            this.setState({ selectedDate, reservationList: [] });\n            this.getReservationList(selectedDate);\n        }\n    }\n\n    render() {\n        const { reservationList, selectedDate } = this.state;\n        return (\n            <div>\n                <div>\n                    <DatePicker\n                        defaultValue={selectedDate}\n                        onChange={(date) => this.handleOnChangeArrivalDate(date)}\n                        allowClear={false}\n                    />\n                </div>\n                <div className=\"body-container\">\n                    {selectedDate ? (reservationList.length > 0 ? this.renderTable() : <h5>No reservations</h5>) : <h5>Select Date</h5>}\n                </div>\n            </div>\n        )\n    }\n}\nexport default ReportScreen;\n","import { DatePicker, TimePicker } from 'antd';\nimport moment, { Moment } from 'moment';\nimport React from 'react';\nimport { Button, Col, Form } from 'react-bootstrap';\nimport { ReservationForm } from '../../models/Customer';\nimport './reservations.scss';\nimport ReservationService from '../../services/apis/Reservations';\nimport { DateTimeFormat, FormUtils } from '../../services/FormUtils';\nimport { toast, ToastContainer } from 'react-toastify';\n\ninterface Props {}\n\ninterface State {\n    firstName: string,\n    lastName: string,\n    phone: string,\n    arrivalDate: Moment,\n    arrivalTime: Moment,\n    departureTime: Moment,\n    total: number,\n    validated: boolean,\n}\n\nclass ReservationsScreen extends React.Component<Props, State>  {\n\n    constructor(props: any) {\n        super(props);\n        const now = moment();\n\n        this.state = {\n            firstName: '',\n            lastName: '',\n            phone: '',\n            arrivalDate: now,\n            arrivalTime: now,\n            departureTime: now,\n            total: 0,\n            validated: false,\n        };\n        this._onSubmit = this._onSubmit.bind(this);\n    }\n\n    handleOnChangeArrivalDate(date: moment.Moment | null) {\n        if (date) {\n            this.setState({ arrivalDate: date });\n        }\n    }\n\n    _onSubmit() {\n        this.setState({ validated: true });\n        const formBody = this.getFormBody();\n        const isAllCorrect = FormUtils.validateForm(formBody);\n\n        if (!isAllCorrect) {\n            toast.warn('Please correct your information!', {\n                position: toast.POSITION.TOP_CENTER,\n                autoClose: 2000,\n            });\n            return;\n        }\n\n        ReservationService.saveReservations(formBody)\n            .then(() => {\n                toast.success(\"Your reservations is successful.\", {\n                    position: toast.POSITION.TOP_CENTER,\n                    autoClose: 3000,\n                });\n                this.clearData();\n            })\n            .catch((e: Error) => {\n                toast.error(e.message, {\n                    position: toast.POSITION.TOP_CENTER,\n                    autoClose: 3000,\n                });\n            });\n    }\n\n    handleOnChangeTotal(event: any) {\n        const total = event.target.value;\n        if (Number(total) < 0) {\n            return;\n        }\n        this.setState({ total: total })\n    }\n\n    handleOnChangePhoneNumber(event: any) {\n        const phone = event.target.value as string;\n        if (Number(phone) < 0) {\n            return;\n        }\n        this.setState({ phone })\n    }\n\n    getFormBody(): ReservationForm {\n        const { firstName, lastName, phone, arrivalDate, arrivalTime, departureTime, total } = this.state\n        return {\n            firstName,\n            lastName,\n            phone,\n            arrivalDate: arrivalDate.format(DateTimeFormat.date),\n            arrivalTime: arrivalTime.format(DateTimeFormat.time),\n            departureTime: departureTime.format(DateTimeFormat.time),\n            total\n        }\n    }\n\n    clearData() {\n        const now = moment();\n        this.setState({\n            firstName: '',\n            lastName: '',\n            phone: '',\n            arrivalDate: now,\n            arrivalTime: now,\n            departureTime: now,\n            total: 0,\n            validated: false,\n        })\n    }\n\n    render() {\n        const { firstName, lastName, phone, arrivalDate, arrivalTime, departureTime, total, validated } = this.state;\n        return (\n            <>\n                <Form validated={FormUtils.validateForm(this.getFormBody())}>\n                    <div className=\"header-boundary\">\n                        <h3>Reservation Form</h3>\n                        <h5>Please fill the form below accurately to enable us serve you better!.. welcome!</h5>\n                    </div>\n                    <div className=\"forms-body\">\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"validationCustom01\">\n                                <Form.Label>First name</Form.Label>\n                                <Form.Control\n                                    required\n                                    type=\"text\"\n                                    placeholder=\"First name\"\n                                    value={firstName}\n                                    onChange={(event: any) => { this.setState({ firstName: event.target.value }) }}\n                                    isInvalid={!FormUtils.validateText(firstName) && validated}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    First name is required\n                        </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group as={Col} controlId=\"validationCustom02\">\n                                <Form.Label>Last name</Form.Label>\n                                <Form.Control\n                                    required\n                                    type=\"text\"\n                                    placeholder=\"Last name\"\n                                    value={lastName}\n                                    onChange={(event: any) => { this.setState({ lastName: event.target.value }) }}\n                                    isInvalid={!FormUtils.validateText(lastName) && validated}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Last name is required\n                        </Form.Control.Feedback>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"validationCustom03\">\n                                <Form.Label>Phone number</Form.Label>\n                                <Form.Control\n                                    required\n                                    type=\"number\"\n                                    placeholder=\"Phone number\"\n                                    value={phone}\n                                    onChange={(event: any) => this.handleOnChangePhoneNumber(event)}\n                                    isInvalid={!FormUtils.validatePhone(phone) && validated}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Phone number is not correct (0XXXXXXX) or (0XXXXXXX-X)\n                        </Form.Control.Feedback>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row className='body-group'>\n                            <Form.Group as={Col} md=\"3\" controlId=\"validationCustom04\">\n                                <Form.Label>Arrival Date</Form.Label>\n                                <div className={!FormUtils.validateDate(arrivalDate) && validated ? 'time-input-warning' : undefined}>\n                                    <DatePicker\n                                        defaultValue={arrivalDate}\n                                        onChange={(date) => this.handleOnChangeArrivalDate(date)}\n                                        allowClear={false}\n                                    />\n                                </div>\n                                {!FormUtils.validateDate(arrivalDate) && validated &&\n                                    <div className=\"custom-warning\">\n                                        <Form.Text>Cannot select in past dates</Form.Text>\n                                    </div>\n                                }\n                            </Form.Group>\n                            <Form.Group as={Col} md=\"3\" controlId=\"validationCustom04\">\n                                <Form.Label>Arrival Time</Form.Label>\n                                <div className={!FormUtils.validateArrivalTime(arrivalDate, arrivalTime) && validated ? 'time-input-warning' : ''}>\n                                    <TimePicker\n                                        defaultValue={arrivalTime}\n                                        format={DateTimeFormat.time}\n                                        onChange={(time) => time ? this.setState({ arrivalTime: time }) : time}\n                                        allowClear={false}\n                                    />\n                                </div>\n                                {!FormUtils.validateArrivalTime(arrivalDate, arrivalTime) && validated &&\n                                    <div className=\"custom-warning\">\n                                        <Form.Text>Arrival Time cannot be less than Now</Form.Text>\n                                    </div>\n                                }\n                            </Form.Group>\n                            <Form.Group as={Col} md=\"3\" controlId=\"validationCustom06\">\n                                <Form.Label>Departure Time</Form.Label>\n                                <div className={!FormUtils.validateDepartureTime(arrivalTime, departureTime) && validated ? 'time-input-warning' : ''}>\n                                    <TimePicker\n                                        defaultValue={departureTime}\n                                        format={DateTimeFormat.time}\n                                        onChange={(time) => time ? this.setState({ departureTime: time }) : time}\n                                        allowClear={false}\n                                    />\n                                </div>\n                                {!FormUtils.validateDepartureTime(arrivalTime, departureTime) && validated &&\n                                    <div className=\"custom-warning\">\n                                        <Form.Text>Departure Time must be more than Arrival Time</Form.Text>\n                                    </div>\n                                }\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"validationCustom02\">\n                                <Form.Label>Total</Form.Label>\n                                <Form.Control\n                                    required\n                                    type=\"number\"\n                                    placeholder=\"Total\"\n                                    value={total}\n                                    onChange={(event: any) => { this.handleOnChangeTotal(event) }}\n                                    isInvalid={(String(total).length <= 0 || total === 0) && validated}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Total is required\n                        </Form.Control.Feedback>\n                            </Form.Group>\n                        </Form.Row>\n                        <div className=\"submit-button-container\">\n                            <Button type=\"button\" onClick={this._onSubmit}>Submit</Button>\n                        </div>\n                    </div>\n                </Form >\n                <ToastContainer />\n            </>\n        )\n    }\n}\nexport default ReservationsScreen;\n","import React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport { Route, Switch } from \"react-router-dom\";\nimport './App.scss';\nimport ReportScreen from './screens/ReportScreen/report';\nimport ReservationsScreen from './screens/ReservationsScreen/reservations';\n\nfunction App() {\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>Restaurant</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/reservation\">Reservations</Nav.Link>\n          <Nav.Link href=\"/reservation/report\">Report</Nav.Link>\n        </Nav>\n      </Navbar>\n\n      <div className=\"App\">\n        <Switch>\n          <Route exact path='/reservation' component={ReservationsScreen} />\n          <Route exact path='/reservation/report' component={ReportScreen} />\n        </Switch>\n      </div>\n    </>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'antd/dist/antd.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'react-toastify/dist/ReactToastify.css';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nconst AppWithRouter = () => (\n  <BrowserRouter basename=\"/form\">\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(<AppWithRouter />, document.getElementById('root'))\nserviceWorker.register();"],"sourceRoot":""}