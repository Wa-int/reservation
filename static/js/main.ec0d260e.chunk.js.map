{"version":3,"sources":["services/LocalStorageSevice.tsx","services/apis/Reservations.tsx","screens/ReservationsScreen/reservations.tsx","screens/ReportScreen/report.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StorageKey","LocalStorageService","setReservationList","details","localStorage","setItem","Reservations","getReservationList","getItem","clearReservationList","removeItem","ReservationService","reservationForm","Promise","resolve","reject","reservationList","JSON","parse","push","stringify","Error","date","reservationFormResponse","allTable","Array","isArray","length","result","filter","e","arrivalDate","reduce","r","a","key","firstName","toUpperCase","lastName","Object","create","allTables","entries","value","name","total","table","reservationListDetails","totalByName","n","Number","Math","floor","ReservationsScreen","props","timeFormat","now","moment","state","phone","arrivalTime","departureTime","validated","_onSubmit","bind","this","setState","validateForm","format","saveReservations","then","window","location","reload","catch","console","log","event","target","validateArrivalTime","validateDepartureTime","validateDay","validatePhone","set","second","millisecond","isBefore","selectedTime","isSameOrAfter","test","isSameOrBefore","Form","className","Row","Group","as","Col","controlId","Label","Control","required","type","placeholder","onChange","isInvalid","Feedback","handleOnChangePhoneNumber","md","defaultValue","handleOnChangeArrivalDate","allowClear","Text","time","handleOnChangeTotal","Button","onClick","React","Component","ReportScreen","selectedDate","summary","getReservationsByDate","data","count","Table","responsive","map","customer","i","lengthSpan","j","rowSpan","renderTable","App","Navbar","bg","variant","Brand","Nav","Link","href","exact","path","component","render","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","AppWithRouter","basename","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ec0d260e.chunk.js","sourcesContent":["\nenum StorageKey {\n    Reservations = 'reservations',\n}\n\nfunction setReservationList(details: string) {\n    return localStorage.setItem(StorageKey.Reservations, details);\n}\n\nfunction getReservationList(): string {\n    return localStorage.getItem(StorageKey.Reservations) || '';\n}\n\nfunction clearReservationList() {\n    return localStorage.removeItem(StorageKey.Reservations);\n}\n\nconst LocalStorageService = {\n    setReservationList,\n    getReservationList,\n    clearReservationList\n}\n\nexport default LocalStorageService;","import LocalStorageService from \"../LocalStorageSevice\";\nimport { ReservationForm, ReservationFormResponse, ReservationList } from \"../../models/Customer\";\n\n\nexport class ReservationService {\n\n    /**\n     * Save Reservation Form\n     */\n    public static saveReservations(reservationForm: ReservationForm | undefined): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (reservationForm) {\n                const reservationList = JSON.parse(LocalStorageService.getReservationList() || \"[]\") as ReservationForm[];\n                \n                reservationList.push(reservationForm);\n                const details = JSON.stringify(reservationList);\n\n                resolve(LocalStorageService.setReservationList(details));\n            } else {\n                reject(new Error('Data could not be saved, please try again.'))\n            }\n        });\n    }\n\n    /**\n     * Get Reservation Form\n     */\n\n    public static getReservationsByDate(date: string | undefined): Promise<ReservationFormResponse> {\n        return new Promise((resolve, reject) => {\n            if (date) {\n                const reservationList = JSON.parse(LocalStorageService.getReservationList() || \"[]\") as ReservationForm[];\n                const reservationFormResponse: ReservationFormResponse = { allTable: 0, reservationList: [] };\n                if (Array.isArray(reservationList) && reservationList.length > 0) {\n\n                    let result = reservationList\n                        .filter((e) => e.arrivalDate === date)\n                        // Group by First name + Last name.\n                        // In case a customer reserves more than 1.\n                        .reduce((r, a) => {\n                            const key = `${a.firstName.toUpperCase()} ${a.lastName.toUpperCase()}`\n                            r[key] = r[key] || [];\n                            r[key].push(a);\n                            return r;\n                        }, Object.create(null));\n\n                    let allTables = 0;\n                    const unit = 4;\n\n                    for (let [key, value] of Object.entries(result)) {\n                        const reservationList: ReservationList = { name: '', total: 0, table: 0, reservationListDetails: [] };\n\n                        const totalByName = (value as ReservationForm[]).reduce((n, e) => n + Number(e.total), 0)\n\n                        let table = 0;\n\n                        table = Math.floor(totalByName / unit)\n                        table = totalByName % unit > 0 ? table + 1 : table;\n\n                        allTables = allTables + table;\n\n                        reservationList.name = key;\n                        reservationList.reservationListDetails = value as ReservationForm[];\n                        reservationList.total = totalByName;\n                        reservationList.table = table;\n                        \n                        reservationFormResponse.reservationList.push(reservationList);\n                    }\n                    reservationFormResponse.allTable = allTables;\n                    resolve(reservationFormResponse);\n                } else {\n                    resolve(reservationFormResponse);\n                }\n            } else {\n                reject(new Error('Unable to complete your request.'))\n            }\n        });\n    }\n\n}\n\nexport default ReservationService;","import { DatePicker, TimePicker } from 'antd';\nimport moment, { Moment } from 'moment';\nimport React from 'react';\nimport { Button, Col, Form } from 'react-bootstrap';\nimport { ReservationForm } from '../../models/Customer';\nimport './reservations.scss';\nimport ReservationService from '../../services/apis/Reservations';\n\ninterface State {\n    firstName: string,\n    lastName: string,\n    phone: string,\n    arrivalDate: Moment,\n    arrivalTime: Moment,\n    departureTime: Moment,\n    total: number,\n    validated: boolean,\n}\n\nclass ReservationsScreen extends React.Component<any, State>  {\n    timeFormat: string;\n\n    constructor(props: any) {\n        super(props);\n        const now = moment();\n\n        this.state = {\n            firstName: '',\n            lastName: '',\n            phone: '',\n            arrivalDate: now,\n            arrivalTime: now,\n            departureTime: now,\n            total: 0,\n            validated: false,\n        };\n        this.timeFormat = 'h:mm a';\n        this._onSubmit = this._onSubmit.bind(this);\n    }\n\n    componentDidMount() { }\n\n    handleOnChangeArrivalDate(date: moment.Moment | null) {\n        if (date) {\n            this.setState({ arrivalDate: date });\n        }\n    }\n\n    async _onSubmit() {\n        this.setState({ validated: true });\n        const isAllCorrect = this.validateForm();\n\n        if (!isAllCorrect) {\n            return;\n        }\n\n        const { firstName, lastName, phone, arrivalDate, arrivalTime, departureTime, total } = this.state\n\n        const reservationForm: ReservationForm = {\n            firstName,\n            lastName,\n            phone,\n            arrivalDate: arrivalDate.format('YYYY-MM-DD'),\n            arrivalTime: arrivalTime.format(this.timeFormat),\n            departureTime: departureTime.format(this.timeFormat),\n            total\n        }\n\n        ReservationService.saveReservations(reservationForm)\n            .then(() => {\n                window.location.reload(false);\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n    }\n\n    handleOnChangeTotal(event: any) {\n        const total = event.target.value;\n        if (Number(total) < 0) {\n            return;\n        }\n        this.setState({ total: total })\n\n    }\n\n    handleOnChangePhoneNumber(event: any) {\n        const phone = event.target.value as string;\n        if (Number(phone) < 0) {\n            return;\n        }\n        this.setState({ phone })\n    }\n\n    validateForm(): boolean {\n        const { firstName, lastName, total } = this.state;\n        return firstName.length > 0\n            && lastName.length > 0\n            && this.validateArrivalTime()\n            && this.validateDepartureTime()\n            && this.validateDay()\n            && this.validatePhone()\n            && total > 0;\n\n    }\n    validateDepartureTime(): boolean {\n        const { arrivalTime, departureTime } = this.state;\n        arrivalTime.set({second:0,millisecond:0});\n        departureTime.set({second:0,millisecond:0});\n        return arrivalTime.isBefore(departureTime);\n    }\n\n    validateArrivalTime(): boolean {\n        const { arrivalTime, arrivalDate } = this.state;\n        const selectedTime = moment(`${arrivalDate.format('YYYY-MM-DD')} ${arrivalTime.format('HH:mm')}`);\n        const now = moment().set({second:0,millisecond:0})\n        return selectedTime.isSameOrAfter(now);\n    }\n\n    validatePhone(): boolean {\n        const { phone } = this.state;\n        const phoneFormat = /^[0][1-9]\\d{7}$|^[0][1-9]\\d{8}$/;\n        return phoneFormat.test(phone)\n    }\n\n    validateDay(): boolean {\n        const { arrivalDate } = this.state;\n        const today = moment();\n        return today.isSameOrBefore(arrivalDate, 'day');\n    }\n\n    render() {\n        const { firstName, lastName, phone, arrivalDate, arrivalTime, departureTime, total, validated } = this.state;\n        return (\n            <Form validated={this.validateForm()}>\n                <div className=\"header-boundary\">\n                    <h3>Reservation Form</h3>\n                    <h5>Please fill the form below accurately to enable us serve you better!.. welcome!</h5>\n                </div>\n                <div className=\"forms-body\">\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"validationCustom01\">\n                            <Form.Label>First name</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                placeholder=\"First name\"\n                                value={firstName}\n                                onChange={(event: any) => { this.setState({ firstName: event.target.value }) }}\n                                isInvalid={firstName.length === 0 && validated}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                First name is required\n                        </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} controlId=\"validationCustom02\">\n                            <Form.Label>Last name</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                placeholder=\"Last name\"\n                                value={lastName}\n                                onChange={(event: any) => { this.setState({ lastName: event.target.value }) }}\n                                isInvalid={lastName.length === 0 && validated}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Last name is required\n                        </Form.Control.Feedback>\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"validationCustom02\">\n                            <Form.Label>Phone number</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"number\"\n                                placeholder=\"Phone number\"\n                                value={phone}\n                                onChange={(event: any) => this.handleOnChangePhoneNumber(event)}\n                                isInvalid={!this.validatePhone() && validated}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Phone number is not correct (0XXXXXXX)\n                        </Form.Control.Feedback>\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row className='body-group'>\n                        <Form.Group as={Col} md=\"3\" controlId=\"validationCustom03\">\n                            <Form.Label>Arrival Date</Form.Label>\n                            <div className={!this.validateDay() && validated ? 'time-input-warning' : ''}>\n                                <DatePicker\n                                    defaultValue={arrivalDate}\n                                    onChange={(date) => this.handleOnChangeArrivalDate(date)}\n                                    allowClear={false}\n                                />\n                            </div>\n                            {!this.validateDay() && validated &&\n                                <div className=\"custom-warning\">\n                                    <Form.Text>Cannot select in past dates</Form.Text>\n                                </div>\n                            }\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"3\" controlId=\"validationCustom04\">\n                            <Form.Label>Arrival Time</Form.Label>\n                            <div className={!this.validateArrivalTime() && validated ? 'time-input-warning' : ''}>\n                                <TimePicker\n                                    defaultValue={arrivalTime}\n                                    format={this.timeFormat}\n                                    onChange={(time) => time ? this.setState({ arrivalTime: time }) : time}\n                                    allowClear={false}\n                                />\n                            </div>\n                            {!this.validateArrivalTime() && validated &&\n                                <div className=\"custom-warning\">\n                                    <Form.Text>Arrival Time cannot be less than Now</Form.Text>\n                                </div>\n                            }\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"3\" controlId=\"validationCustom05\">\n                            <Form.Label>Departure Time</Form.Label>\n                            <div className={!this.validateDepartureTime() && validated ? 'time-input-warning' : ''}>\n                                <TimePicker\n                                    defaultValue={departureTime}\n                                    format={this.timeFormat}\n                                    onChange={(time) => time ? this.setState({ departureTime: time }) : time}\n                                    allowClear={false}\n                                />\n                            </div>\n                            {!this.validateDepartureTime() && validated &&\n                                <div className=\"custom-warning\">\n                                    <Form.Text>Departure Time must be more than Arrival Time</Form.Text>\n                                </div>\n                            }\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"validationCustom02\">\n                            <Form.Label>Total</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"number\"\n                                placeholder=\"Total\"\n                                value={total}\n                                onChange={(event: any) => { this.handleOnChangeTotal(event) }}\n                                isInvalid={total === 0 && validated}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Total is required\n                        </Form.Control.Feedback>\n                        </Form.Group>\n                    </Form.Row>\n                    <div className=\"submit-button-container\">\n                        <Button type=\"button\" onClick={this._onSubmit}>Submit</Button>\n                    </div>\n                </div>\n            </Form >\n\n        )\n    }\n}\nexport default ReservationsScreen;\n","import React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { DatePicker } from 'antd';\nimport { ReservationList } from '../../models/Customer';\nimport './report.scss';\nimport { ReservationService } from '../../services/apis/Reservations';\nimport moment, { Moment } from 'moment';\n\ninterface State {\n    reservationList: ReservationList[],\n    summary: number,\n    selectedDate: Moment,\n}\n\n\nclass ReportScreen extends React.Component<any, State>  {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            reservationList: [],\n            selectedDate: moment(),\n            summary: 0,\n        };\n\n    }\n\n    componentDidMount() {\n        this.getReservationList(this.state.selectedDate);\n    }\n\n    getReservationList(selectedDate: Moment) {\n        ReservationService.getReservationsByDate(selectedDate.format('YYYY-MM-DD'))\n            .then((data) => {\n                this.setState({ reservationList: data.reservationList, summary: data.allTable });\n            })\n            .catch((e) => console.log(e));\n    }\n\n    renderTable() {\n        const { reservationList, summary } = this.state;\n        let count = 0;\n        return (\n            <div className='table-style'>\n                <Table responsive='sm'>\n                    <thead>\n                        <tr>\n                            <th>No.</th>\n                            <th>Name</th>\n                            <th>Arrival Time</th>\n                            <th>Departure Time</th>\n                            <th>Tel</th>\n                            <th>Total/Reservation</th>\n                            <th>Total</th>\n                            <th>Table</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {reservationList.map((customer, i) => {\n                            const lengthSpan = customer.reservationListDetails.length;\n                            return (\n                                <>\n                                    {customer.reservationListDetails.map((details, j) => {\n                                        const key = `${i}${j}-${customer.name}-${details.arrivalTime}`\n                                        count = count + 1;\n                                        return (\n                                            <tr key={key}>\n                                                <td>{count}</td>\n                                                {j === 0 && <td rowSpan={lengthSpan}>{customer.name}</td>}\n                                                <td>{details.arrivalTime}</td>\n                                                <td>{details.departureTime}</td>\n                                                <td>{details.phone}</td>\n                                                <td>{details.total}</td>\n                                                {j === 0 && <td rowSpan={lengthSpan}>{customer.total}</td>}\n                                                {j === 0 && <td rowSpan={lengthSpan}>{customer.table}</td>}\n                                            </tr>\n                                        )\n                                    })}\n                                </>\n                            )\n                        })}\n                    </tbody>\n                </Table>\n                <div className='summary-style '>\n                    {`Summary: ${summary} Table(s)`}\n                </div>\n            </div>\n        )\n    }\n\n    handleOnChangeArrivalDate(selectedDate: Moment | null) {\n        if (selectedDate) {\n            this.setState({ selectedDate, reservationList: [] });\n            this.getReservationList(selectedDate);\n        }\n    }\n\n    render() {\n        const { reservationList, selectedDate } = this.state;\n        return (\n            <div>\n                <div>\n                    <DatePicker\n                        defaultValue={selectedDate}\n                        onChange={(date) => this.handleOnChangeArrivalDate(date)}\n                        allowClear={false}\n                    />\n                </div>\n                <div className=\"body-container\">\n                    {selectedDate ? (reservationList.length > 0 ? this.renderTable() : <h5>No reservations</h5>) : <h5>Select Date</h5>}\n                </div>\n            </div>\n        )\n    }\n}\nexport default ReportScreen;\n","import React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport { Route, Switch } from \"react-router-dom\";\nimport './App.scss';\nimport ReservationsScreen from './screens/ReservationsScreen/reservations';\nimport ReportScreen from './screens/ReportScreen/report';\n\nfunction App() {\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>Restaurant</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/reservation/home/reservations/\">Reservations</Nav.Link>\n          <Nav.Link href=\"/report\">Report</Nav.Link>\n        </Nav>\n      </Navbar>\n\n      <div className=\"App\">\n        <Switch>\n          <Route exact path='/reservation/home/reservations/' component={ReservationsScreen} />\n          <Route exact path='/report' component={ReportScreen} />\n          <Route render={function () {\n            return <p>Not found</p>\n          }} />\n        </Switch>\n      </div>\n    </>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'antd/dist/antd.css'; \n\nconst AppWithRouter = () => (\n  <BrowserRouter basename=\"/home\">\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(<AppWithRouter />, document.getElementById('root'))\nserviceWorker.register();"],"sourceRoot":""}