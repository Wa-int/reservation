{"version":3,"sources":["services/LocalStorageSevice.tsx","services/apis/FormUtils.tsx","services/apis/Reservations.tsx","screens/ReservationsScreen/reservations.tsx","screens/ReportScreen/report.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StorageKey","LocalStorageService","setReservationList","details","localStorage","setItem","Reservations","getReservationList","getItem","clearReservationList","removeItem","DateTimeFormat","FormUtils","form","this","validateText","firstName","lastName","validateDate","moment","arrivalDate","validateDateFormat","validateArrivalTime","validateDepartureTime","arrivalTime","departureTime","validatePhone","phone","validateNumber","total","text","length","number","isSameOrBefore","date","isValid","selectedTime","format","now","set","second","millisecond","isSameOrAfter","isBefore","test","ReservationService","reservationForm","Promise","resolve","reject","validateForm","reservationList","JSON","parse","push","stringify","Error","reservationFormResponse","allTable","Array","isArray","result","filter","e","reduce","r","a","key","toUpperCase","Object","create","allTables","entries","value","name","table","reservationListDetails","totalByName","n","Number","Math","floor","ReservationsScreen","props","state","validated","_onSubmit","bind","setState","formBody","getFormBody","saveReservations","then","toast","success","position","POSITION","TOP_CENTER","autoClose","clearData","catch","error","message","warn","event","target","Form","className","Row","Group","as","Col","controlId","Label","Control","required","type","placeholder","onChange","isInvalid","Feedback","handleOnChangePhoneNumber","md","undefined","defaultValue","handleOnChangeArrivalDate","allowClear","Text","time","handleOnChangeTotal","String","Button","onClick","React","Component","ReportScreen","selectedDate","summary","getReservationsByDate","data","console","log","count","Table","responsive","map","customer","i","lengthSpan","j","rowSpanCond","rowSpan","renderTable","App","Navbar","bg","variant","Brand","Nav","Link","href","exact","path","component","render","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","AppWithRouter","basename","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0af4d729.chunk.js","sourcesContent":["\nenum StorageKey {\n    Reservations = 'reservations',\n}\n\nfunction setReservationList(details: string) {\n    return localStorage.setItem(StorageKey.Reservations, details);\n}\n\nfunction getReservationList(): string {\n    return localStorage.getItem(StorageKey.Reservations) || '';\n}\n\nfunction clearReservationList() {\n    return localStorage.removeItem(StorageKey.Reservations);\n}\n\nconst LocalStorageService = {\n    setReservationList,\n    getReservationList,\n    clearReservationList\n}\n\nexport default LocalStorageService;","import moment, { Moment } from \"moment\";\nimport { ReservationForm } from \"../../models/Customer\";\n\nexport const DateTimeFormat = {\n    date: 'YYYY-MM-DD',\n    time: 'h:mm A',\n};\n\nexport class FormUtils {\n\n    // Validate all\n    public static validateForm(form: ReservationForm): boolean {\n\n        return this.validateText(form.firstName)\n            && this.validateText(form.lastName)\n            && this.validateDate(moment(form.arrivalDate))\n            && this.validateDateFormat(form.arrivalDate)\n            && this.validateArrivalTime(moment(form.arrivalDate), moment(form.arrivalDate, DateTimeFormat.time))\n            && this.validateDepartureTime(moment(form.arrivalTime, DateTimeFormat.time), moment(form.departureTime, DateTimeFormat.time))\n            && this.validatePhone(form.phone)\n            && this.validateNumber(form.total);\n    }\n\n    // Validate string\n    public static validateText(text: string): boolean {\n        return text.length > 0;\n    }\n\n    // ValidateNumber\n    public static validateNumber(number: number): boolean {\n        return number > 0;\n    }\n\n    // Selected Date must be more than today\n    public static validateDate(arrivalDate: Moment): boolean {\n        const today = moment();\n        return today.isSameOrBefore(arrivalDate, 'day');\n    }\n\n    // Expect YYYY-MM-DD format\n    public static validateDateFormat(date: string): boolean {\n        return moment(date, DateTimeFormat.date, true).isValid();\n    }\n\n    // Arrival Time must be equare equal to or more than now\n    public static validateArrivalTime(arrivalDate: Moment, arrivalTime: Moment): boolean {\n        const selectedTime = moment(`${arrivalDate.format(DateTimeFormat.date)} ${arrivalTime.format(DateTimeFormat.time)}`);\n        const now = moment().set({ second: 0, millisecond: 0 })\n        return selectedTime.isSameOrAfter(now);\n    }\n\n    // Departure Time must be more than Arrival Time\n    public static validateDepartureTime(arrivalTime: Moment, departureTime: Moment): boolean {\n        arrivalTime.set({ second: 0, millisecond: 0 });\n        departureTime.set({ second: 0, millisecond: 0 });\n        return arrivalTime.isBefore(departureTime);\n    }\n\n    // Phone number must be correct\n    public static validatePhone(phone: string): boolean {\n        const phoneFormat = /^[0][1-9]\\d{7}$|^[0][1-9]\\d{8}$/;\n        return phoneFormat.test(phone)\n    }\n\n\n}\n","import moment from \"moment\";\nimport { ReservationForm, ReservationFormResponse, ReservationList } from \"../../models/Customer\";\nimport LocalStorageService from \"../LocalStorageSevice\";\nimport { DateTimeFormat, FormUtils } from \"./FormUtils\";\n\nexport class ReservationService {\n\n    /**\n     * Save Reservation Form\n     */\n    public static saveReservations(reservationForm: ReservationForm | undefined): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            if (reservationForm && FormUtils.validateForm(reservationForm)) {\n                const reservationList = JSON.parse(LocalStorageService.getReservationList() || \"[]\") as ReservationForm[];\n\n                reservationList.push(reservationForm);\n                const details = JSON.stringify(reservationList);\n                LocalStorageService.setReservationList(details)\n                resolve(true);\n            } else {\n                reject(new Error('Data could not be saved, please try again.'))\n            }\n        });\n    }\n\n    /**\n     * Get Reservation Form\n     */\n\n    public static getReservationsByDate(date: string | null | undefined): Promise<ReservationFormResponse> {\n        return new Promise((resolve, reject) => {\n            if (date && moment(date, DateTimeFormat.date, true).isValid()) {\n                const reservationList = JSON.parse(LocalStorageService.getReservationList() || \"[]\") as ReservationForm[];\n                const reservationFormResponse: ReservationFormResponse = { allTable: 0, reservationList: [] };\n                if (Array.isArray(reservationList) && reservationList.length > 0) {\n\n                    let result = reservationList\n                        .filter((e) => e.arrivalDate === date)\n                        // Group by First name + Last name.\n                        // In case a customer reserves more than 1 in this day.\n                        .reduce((r, a) => {\n                            const key = `${a.firstName.toUpperCase()} ${a.lastName.toUpperCase()}`\n                            r[key] = r[key] || [];\n                            r[key].push(a);\n                            return r;\n                        }, Object.create(null));\n\n                    let allTables = 0;\n                    const unit = 4;\n\n                    for (let [key, value] of Object.entries(result)) {\n                        const reservationList: ReservationList = { name: '', total: 0, table: 0, reservationListDetails: [] };\n                        const totalByName = (value as ReservationForm[]).reduce((n, e) => n + Number(e.total), 0)\n                        let table = 0;\n\n                        table = Math.floor(totalByName / unit)\n                        table = totalByName % unit > 0 ? table + 1 : table;\n\n                        allTables = allTables + table;\n\n                        reservationList.name = key;\n                        reservationList.reservationListDetails = value as ReservationForm[];\n                        reservationList.total = totalByName;\n                        reservationList.table = table;\n\n                        reservationFormResponse.reservationList.push(reservationList);\n                    }\n                    reservationFormResponse.allTable = allTables;\n                    resolve(reservationFormResponse);\n                } else {\n                    resolve(reservationFormResponse);\n                }\n            } else {\n                reject(new Error('Unable to complete your request.'));\n            }\n        });\n    }\n}\n\n\nexport default ReservationService;","import { DatePicker, TimePicker } from 'antd';\nimport moment, { Moment } from 'moment';\nimport React from 'react';\nimport { Button, Col, Form } from 'react-bootstrap';\nimport { ReservationForm } from '../../models/Customer';\nimport './reservations.scss';\nimport ReservationService from '../../services/apis/Reservations';\nimport { DateTimeFormat, FormUtils } from '../../services/apis/FormUtils';\nimport { toast, ToastContainer } from 'react-toastify';\n\ninterface Props {}\n\ninterface State {\n    firstName: string,\n    lastName: string,\n    phone: string,\n    arrivalDate: Moment,\n    arrivalTime: Moment,\n    departureTime: Moment,\n    total: number,\n    validated: boolean,\n}\n\nclass ReservationsScreen extends React.Component<Props, State>  {\n\n    constructor(props: any) {\n        super(props);\n        const now = moment();\n\n        this.state = {\n            firstName: '',\n            lastName: '',\n            phone: '',\n            arrivalDate: now,\n            arrivalTime: now,\n            departureTime: now,\n            total: 0,\n            validated: false,\n        };\n        this._onSubmit = this._onSubmit.bind(this);\n    }\n\n    handleOnChangeArrivalDate(date: moment.Moment | null) {\n        if (date) {\n            this.setState({ arrivalDate: date });\n        }\n    }\n\n    _onSubmit() {\n        this.setState({ validated: true });\n        const formBody = this.getFormBody();\n        const isAllCorrect = FormUtils.validateForm(formBody);\n\n        if (!isAllCorrect) {\n            toast.warn('Please correct your information!', {\n                position: toast.POSITION.TOP_CENTER,\n                autoClose: 2000,\n            });\n            return;\n        }\n\n        ReservationService.saveReservations(formBody)\n            .then(() => {\n                toast.success(\"Your reservations is successful.\", {\n                    position: toast.POSITION.TOP_CENTER,\n                    autoClose: 3000,\n                });\n                this.clearData();\n            })\n            .catch((e: Error) => {\n                toast.error(e.message, {\n                    position: toast.POSITION.TOP_CENTER,\n                    autoClose: 3000,\n                });\n            });\n    }\n\n    handleOnChangeTotal(event: any) {\n        const total = event.target.value;\n        if (Number(total) < 0) {\n            return;\n        }\n        this.setState({ total: total })\n    }\n\n    handleOnChangePhoneNumber(event: any) {\n        const phone = event.target.value as string;\n        if (Number(phone) < 0) {\n            return;\n        }\n        this.setState({ phone })\n    }\n\n    getFormBody(): ReservationForm {\n        const { firstName, lastName, phone, arrivalDate, arrivalTime, departureTime, total } = this.state\n        return {\n            firstName,\n            lastName,\n            phone,\n            arrivalDate: arrivalDate.format(DateTimeFormat.date),\n            arrivalTime: arrivalTime.format(DateTimeFormat.time),\n            departureTime: departureTime.format(DateTimeFormat.time),\n            total\n        }\n    }\n\n    clearData() {\n        const now = moment();\n        this.setState({\n            firstName: '',\n            lastName: '',\n            phone: '',\n            arrivalDate: now,\n            arrivalTime: now,\n            departureTime: now,\n            total: 0,\n            validated: false,\n        })\n    }\n\n    render() {\n        const { firstName, lastName, phone, arrivalDate, arrivalTime, departureTime, total, validated } = this.state;\n        return (\n            <>\n                <Form validated={FormUtils.validateForm(this.getFormBody())}>\n                    <div className=\"header-boundary\">\n                        <h3>Reservation Form</h3>\n                        <h5>Please fill the form below accurately to enable us serve you better!.. welcome!</h5>\n                    </div>\n                    <div className=\"forms-body\">\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"validationCustom01\">\n                                <Form.Label>First name</Form.Label>\n                                <Form.Control\n                                    required\n                                    type=\"text\"\n                                    placeholder=\"First name\"\n                                    value={firstName}\n                                    onChange={(event: any) => { this.setState({ firstName: event.target.value }) }}\n                                    isInvalid={!FormUtils.validateText(firstName) && validated}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    First name is required\n                        </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group as={Col} controlId=\"validationCustom02\">\n                                <Form.Label>Last name</Form.Label>\n                                <Form.Control\n                                    required\n                                    type=\"text\"\n                                    placeholder=\"Last name\"\n                                    value={lastName}\n                                    onChange={(event: any) => { this.setState({ lastName: event.target.value }) }}\n                                    isInvalid={!FormUtils.validateText(lastName) && validated}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Last name is required\n                        </Form.Control.Feedback>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"validationCustom03\">\n                                <Form.Label>Phone number</Form.Label>\n                                <Form.Control\n                                    required\n                                    type=\"number\"\n                                    placeholder=\"Phone number\"\n                                    value={phone}\n                                    onChange={(event: any) => this.handleOnChangePhoneNumber(event)}\n                                    isInvalid={!FormUtils.validatePhone(phone) && validated}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Phone number is not correct (0XXXXXXX) or (0XXXXXXX-X)\n                        </Form.Control.Feedback>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row className='body-group'>\n                            <Form.Group as={Col} md=\"3\" controlId=\"validationCustom04\">\n                                <Form.Label>Arrival Date</Form.Label>\n                                <div className={!FormUtils.validateDate(arrivalDate) && validated ? 'time-input-warning' : undefined}>\n                                    <DatePicker\n                                        defaultValue={arrivalDate}\n                                        onChange={(date) => this.handleOnChangeArrivalDate(date)}\n                                        allowClear={false}\n                                    />\n                                </div>\n                                {!FormUtils.validateDate(arrivalDate) && validated &&\n                                    <div className=\"custom-warning\">\n                                        <Form.Text>Cannot select in past dates</Form.Text>\n                                    </div>\n                                }\n                            </Form.Group>\n                            <Form.Group as={Col} md=\"3\" controlId=\"validationCustom04\">\n                                <Form.Label>Arrival Time</Form.Label>\n                                <div className={!FormUtils.validateArrivalTime(arrivalDate, arrivalTime) && validated ? 'time-input-warning' : ''}>\n                                    <TimePicker\n                                        defaultValue={arrivalTime}\n                                        format={DateTimeFormat.time}\n                                        onChange={(time) => time ? this.setState({ arrivalTime: time }) : time}\n                                        allowClear={false}\n                                    />\n                                </div>\n                                {!FormUtils.validateArrivalTime(arrivalDate, arrivalTime) && validated &&\n                                    <div className=\"custom-warning\">\n                                        <Form.Text>Arrival Time cannot be less than Now</Form.Text>\n                                    </div>\n                                }\n                            </Form.Group>\n                            <Form.Group as={Col} md=\"3\" controlId=\"validationCustom06\">\n                                <Form.Label>Departure Time</Form.Label>\n                                <div className={!FormUtils.validateDepartureTime(arrivalTime, departureTime) && validated ? 'time-input-warning' : ''}>\n                                    <TimePicker\n                                        defaultValue={departureTime}\n                                        format={DateTimeFormat.time}\n                                        onChange={(time) => time ? this.setState({ departureTime: time }) : time}\n                                        allowClear={false}\n                                    />\n                                </div>\n                                {!FormUtils.validateDepartureTime(arrivalTime, departureTime) && validated &&\n                                    <div className=\"custom-warning\">\n                                        <Form.Text>Departure Time must be more than Arrival Time</Form.Text>\n                                    </div>\n                                }\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"validationCustom02\">\n                                <Form.Label>Total</Form.Label>\n                                <Form.Control\n                                    required\n                                    type=\"number\"\n                                    placeholder=\"Total\"\n                                    value={total}\n                                    onChange={(event: any) => { this.handleOnChangeTotal(event) }}\n                                    isInvalid={(String(total).length <= 0 || total === 0) && validated}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Total is required\n                        </Form.Control.Feedback>\n                            </Form.Group>\n                        </Form.Row>\n                        <div className=\"submit-button-container\">\n                            <Button type=\"button\" onClick={this._onSubmit}>Submit</Button>\n                        </div>\n                    </div>\n                </Form >\n                <ToastContainer />\n            </>\n        )\n    }\n}\nexport default ReservationsScreen;\n","import React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { DatePicker } from 'antd';\nimport { ReservationList } from '../../models/Customer';\nimport './report.scss';\nimport { ReservationService } from '../../services/apis/Reservations';\nimport moment, { Moment } from 'moment';\n\ninterface Props {}\ninterface State {\n    reservationList: ReservationList[],\n    summary: number,\n    selectedDate: Moment,\n}\n\n\nclass ReportScreen extends React.Component<Props, State>  {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            reservationList: [],\n            selectedDate: moment(),\n            summary: 0,\n        };\n\n    }\n\n    componentDidMount() {\n        this.getReservationList(this.state.selectedDate);\n    }\n\n    getReservationList(selectedDate: Moment) {\n        ReservationService.getReservationsByDate(selectedDate.format('YYYY-MM-DD'))\n            .then((data) => {\n                this.setState({ reservationList: data.reservationList, summary: data.allTable });\n            })\n            .catch((e) => console.log(e));\n    }\n\n    renderTable() {\n        const { reservationList, summary } = this.state;\n        let count = 0;\n        return (\n            <div className='table-style'>\n                <Table responsive='sm'>\n                    <thead>\n                        <tr>\n                            <th>No.</th>\n                            <th>Name</th>\n                            <th>Arrival Time</th>\n                            <th>Departure Time</th>\n                            <th>Tel</th>\n                            <th>Total/Reservation</th>\n                            <th>Total</th>\n                            <th>Table</th>\n                        </tr>\n                    </thead>\n                        <tbody>\n                            {reservationList.map((customer, i) => {\n                                const lengthSpan = customer.reservationListDetails.length;\n                                return (\n                                    <>\n                                        {customer.reservationListDetails.map((details, j) => {\n                                            const key = `${i}${j}-${customer.name}-${details.arrivalTime}-${details.departureTime}--${details.phone}-${details.total}`\n                                            const rowSpanCond = j === 0 ? true : false;\n                                            count = count + 1;\n                                            return (\n                                                <tr key={key}>\n                                                    <td>{count}</td>\n                                                    {rowSpanCond && <td rowSpan={lengthSpan}>{customer.name}</td>}\n                                                    <td>{details.arrivalTime}</td>\n                                                    <td>{details.departureTime}</td>\n                                                    <td>{details.phone}</td>\n                                                    <td>{details.total}</td>\n                                                    {rowSpanCond && <td rowSpan={lengthSpan}>{customer.total}</td>}\n                                                    {rowSpanCond && <td rowSpan={lengthSpan}>{customer.table}</td>}\n                                                </tr>\n                                            )\n                                        })}\n                                    </>\n                                )\n                            })}\n                        </tbody>\n                </Table>\n                <div className='summary-style'>\n                    {`Summary: ${summary} Table(s)`}\n                </div>\n            </div>\n        )\n    }\n\n    handleOnChangeArrivalDate(selectedDate: Moment | null) {\n        if (selectedDate) {\n            this.setState({ selectedDate, reservationList: [] });\n            this.getReservationList(selectedDate);\n        }\n    }\n\n    render() {\n        const { reservationList, selectedDate } = this.state;\n        return (\n            <div>\n                <div>\n                    <DatePicker\n                        defaultValue={selectedDate}\n                        onChange={(date) => this.handleOnChangeArrivalDate(date)}\n                        allowClear={false}\n                    />\n                </div>\n                <div className=\"body-container\">\n                    {selectedDate ? (reservationList.length > 0 ? this.renderTable() : <h5>No reservations</h5>) : <h5>Select Date</h5>}\n                </div>\n            </div>\n        )\n    }\n}\nexport default ReportScreen;\n","import React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport { Route, Switch } from \"react-router-dom\";\nimport './App.scss';\nimport ReservationsScreen from './screens/ReservationsScreen/reservations';\nimport ReportScreen from './screens/ReportScreen/report';\n\nfunction App() {\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>Restaurant</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/reservations\">Reservations</Nav.Link>\n          <Nav.Link href=\"/report\">Report</Nav.Link>\n        </Nav>\n      </Navbar>\n\n      <div className=\"App\">\n        <Switch>\n          <Route exact path='/reservations' component={ReservationsScreen} />\n          <Route exact path='/report' component={ReportScreen} />\n          <Route render={function () {\n            return <p>Not found</p>\n          }} />\n        </Switch>\n      </div>\n    </>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'antd/dist/antd.css'; \nimport 'react-toastify/dist/ReactToastify.css';\n\nconst AppWithRouter = () => (\n  <BrowserRouter basename=\"/home\">\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(<AppWithRouter />, document.getElementById('root'))\nserviceWorker.register();"],"sourceRoot":""}